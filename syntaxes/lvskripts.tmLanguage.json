{
	"name": "lvskripts",
	"scopeName": "source.lv",
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#shebang"
		}
	],
	"repository": {
		"shebang": {
			"name": "comment.line.shebang.lvskripts",
			"match": "\\A(#!).*(?=$)",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.lvskripts"
				}
			}
		},
		"statements": {
			"patterns": [
				{
					"include": "#declaration"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#label"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#decorator"
				},
				{
					"include": "#var-expr"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#interface-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#type-alias-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"include": "#export-declaration"
				},
				{
					"name": "storage.modifier.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(deklarēt|eksportēt)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"control-statement": {
			"patterns": [
				{
					"include": "#switch-statement"
				},
				{
					"include": "#for-loop"
				},
				{
					"name": "keyword.control.trycatch.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(noķert|beigās|mest|mēģināt)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārtraukt|izlaist|aiziet)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"1": {
							"name": "keyword.control.loop.lvskripts"
						},
						"2": {
							"name": "entity.name.label.lvskripts"
						}
					}
				},
				{
					"name": "keyword.control.loop.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārtraukt|izlaist|darīt|aiziet|kamēr)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(atgriezt)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.flow.lvskripts"
						}
					},
					"end": "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "keyword.control.switch.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(gadījums|noklusējums|izvēle)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"include": "#if-statement"
				},
				{
					"name": "keyword.control.conditional.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(citādi|ja)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.control.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(paka)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.other.debugger.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(atkļūdotājs)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"label": {
			"patterns": [
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.label.lvskripts"
						},
						"2": {
							"name": "punctuation.separator.label.lvskripts"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#decl-block"
						}
					]
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"captures": {
						"1": {
							"name": "entity.name.label.lvskripts"
						},
						"2": {
							"name": "punctuation.separator.label.lvskripts"
						}
					}
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"expressionWithoutIdentifiers": {
			"patterns": [
				{
					"include": "#jsx"
				},
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#function-expression"
				},
				{
					"include": "#class-expression"
				},
				{
					"include": "#arrow-function"
				},
				{
					"include": "#paren-expression-possibly-arrow"
				},
				{
					"include": "#cast"
				},
				{
					"include": "#ternary-expression"
				},
				{
					"include": "#new-expr"
				},
				{
					"include": "#instanceof-expr"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#support-objects"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"expressionPunctuations": {
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"decorator": {
			"name": "meta.decorator.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@",
			"beginCaptures": {
				"0": {
					"name": "punctuation.decorator.lvskripts"
				}
			},
			"end": "(?=\\s)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"var-expr": {
			"patterns": [
				{
					"name": "meta.var.expr.lvskripts",
					"begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(var|mainīgais)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
					"end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(var|mainīgais)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))|((?<!^mainīgais|[^\\._$[:alnum:]]mainīgais|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))",
					"patterns": [
						{
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(var|mainīgais)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.export.lvskripts"
								},
								"2": {
									"name": "storage.modifier.lvskripts"
								},
								"3": {
									"name": "storage.type.lvskripts"
								}
							},
							"end": "(?=\\S)"
						},
						{
							"include": "#destructuring-variable"
						},
						{
							"include": "#var-single-variable"
						},
						{
							"include": "#variable-initializer"
						},
						{
							"include": "#comment"
						},
						{
							"begin": "(,)\\s*(?=$|\\/\\/)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.separator.comma.lvskripts"
								}
							},
							"end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
							"patterns": [
								{
									"include": "#single-line-comment-consuming-line-ending"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#destructuring-variable"
								},
								{
									"include": "#var-single-variable"
								},
								{
									"include": "#punctuation-comma"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"name": "meta.var.expr.lvskripts",
					"begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(konstante(?!\\s+uzskaitījums\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "storage.type.lvskripts"
						}
					},
					"end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(konstante(?!\\s+uzskaitījums\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))|((?<!^konstante|[^\\._$[:alnum:]]konstante)(?=\\s*$)))",
					"patterns": [
						{
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(konstante(?!\\s+uzskaitījums\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.export.lvskripts"
								},
								"2": {
									"name": "storage.modifier.lvskripts"
								},
								"3": {
									"name": "storage.type.lvskripts"
								}
							},
							"end": "(?=\\S)"
						},
						{
							"include": "#destructuring-const"
						},
						{
							"include": "#var-single-const"
						},
						{
							"include": "#variable-initializer"
						},
						{
							"include": "#comment"
						},
						{
							"begin": "(,)\\s*(?=$|\\/\\/)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.separator.comma.lvskripts"
								}
							},
							"end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
							"patterns": [
								{
									"include": "#single-line-comment-consuming-line-ending"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#destructuring-const"
								},
								{
									"include": "#var-single-const"
								},
								{
									"include": "#punctuation-comma"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"name": "meta.var.expr.lvskripts",
					"begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b((?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "storage.type.lvskripts"
						}
					},
					"end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b((?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))|((?<!^using|[^\\._$[:alnum:]]using|^gaidīt\\s+using|[^\\._$[:alnum:]]gaidīt\\s+using)(?=\\s*$)))",
					"patterns": [
						{
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b((?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.export.lvskripts"
								},
								"2": {
									"name": "storage.modifier.lvskripts"
								},
								"3": {
									"name": "storage.type.lvskripts"
								}
							},
							"end": "(?=\\S)"
						},
						{
							"include": "#var-single-const"
						},
						{
							"include": "#variable-initializer"
						},
						{
							"include": "#comment"
						},
						{
							"begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
							"beginCaptures": {
								"1": {
									"name": "punctuation.separator.comma.lvskripts"
								}
							},
							"end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
							"patterns": [
								{
									"include": "#single-line-comment-consuming-line-ending"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#var-single-const"
								},
								{
									"include": "#punctuation-comma"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"var-single-variable": {
			"patterns": [
				{
					"name": "meta.var-single-variable.expr.lvskripts",
					"begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*\n# funkcija assignment |\n(=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn tips: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.lvskripts entity.name.function.lvskripts"
						},
						"2": {
							"name": "keyword.operator.definiteassignment.lvskripts"
						}
					},
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				},
				{
					"name": "meta.var-single-variable.expr.lvskripts",
					"begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.lvskripts variable.other.constant.lvskripts"
						},
						"2": {
							"name": "keyword.operator.definiteassignment.lvskripts"
						}
					},
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				},
				{
					"name": "meta.var-single-variable.expr.lvskripts",
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.lvskripts variable.other.readwrite.lvskripts"
						},
						"2": {
							"name": "keyword.operator.definiteassignment.lvskripts"
						}
					},
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				}
			]
		},
		"var-single-const": {
			"patterns": [
				{
					"name": "meta.var-single-variable.expr.lvskripts",
					"begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# funkcija assignment |\n(=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn tips: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.lvskripts variable.other.constant.lvskripts entity.name.function.lvskripts"
						}
					},
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				},
				{
					"name": "meta.var-single-variable.expr.lvskripts",
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.lvskripts variable.other.constant.lvskripts"
						}
					},
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				}
			]
		},
		"var-single-variable-type-annotation": {
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"destructuring-variable": {
			"patterns": [
				{
					"name": "meta.object-binding-pattern-variable.lvskripts",
					"begin": "(?<!=|:|^no|[^\\._$[:alnum:]]no|^iekš|[^\\._$[:alnum:]]iekš)\\s*(?=\\{)",
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))",
					"patterns": [
						{
							"include": "#object-binding-pattern"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"name": "meta.array-binding-pattern-variable.lvskripts",
					"begin": "(?<!=|:|^no|[^\\._$[:alnum:]]no|^iekš|[^\\._$[:alnum:]]iekš)\\s*(?=\\[)",
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))",
					"patterns": [
						{
							"include": "#array-binding-pattern"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"destructuring-const": {
			"patterns": [
				{
					"name": "meta.object-binding-pattern-variable.lvskripts",
					"begin": "(?<!=|:|^no|[^\\._$[:alnum:]]no|^iekš|[^\\._$[:alnum:]]iekš)\\s*(?=\\{)",
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))",
					"patterns": [
						{
							"include": "#object-binding-pattern-const"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"name": "meta.array-binding-pattern-variable.lvskripts",
					"begin": "(?<!=|:|^no|[^\\._$[:alnum:]]no|^iekš|[^\\._$[:alnum:]]iekš)\\s*(?=\\[)",
					"end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))",
					"patterns": [
						{
							"include": "#array-binding-pattern-const"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-element-propertyName"
						},
						{
							"include": "#binding-element"
						}
					]
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#destructuring-variable-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"object-binding-element-const": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-element-propertyName"
						},
						{
							"include": "#binding-element-const"
						}
					]
				},
				{
					"include": "#object-binding-pattern-const"
				},
				{
					"include": "#destructuring-variable-rest-const"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"object-binding-element-propertyName": {
			"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
			"end": "(:)",
			"endCaptures": {
				"0": {
					"name": "punctuation.destructuring.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"name": "variable.object.property.lvskripts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		},
		"binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#array-binding-pattern"
				},
				{
					"include": "#destructuring-variable-rest"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"binding-element-const": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#object-binding-pattern-const"
				},
				{
					"include": "#array-binding-pattern-const"
				},
				{
					"include": "#destructuring-variable-rest-const"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"destructuring-variable-rest": {
			"match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "meta.definition.variable.lvskripts variable.other.readwrite.lvskripts"
				}
			}
		},
		"destructuring-variable-rest-const": {
			"match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "meta.definition.variable.lvskripts variable.other.constant.lvskripts"
				}
			}
		},
		"object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#object-binding-element"
				}
			]
		},
		"object-binding-pattern-const": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#object-binding-element-const"
				}
			]
		},
		"array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#binding-element"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"array-binding-pattern-const": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#binding-element-const"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-name": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|aizsargāts|privāts|lasīttikai)\\s+(?=(pārrakstīt|publisks|aizsargāts|privāts|lasīttikai)\\s+)",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# funkcija assignment |\n(=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn tips: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "entity.name.function.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "entity.name.function.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "variable.parameter.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "variable.parameter.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				}
			]
		},
		"destructuring-parameter": {
			"patterns": [
				{
					"name": "meta.parameter.object-binding-pattern.lvskripts",
					"begin": "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"2": {
							"name": "punctuation.definition.binding-pattern.object.lvskripts"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.object.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#parameter-object-binding-element"
						}
					]
				},
				{
					"name": "meta.paramter.array-binding-pattern.lvskripts",
					"begin": "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"2": {
							"name": "punctuation.definition.binding-pattern.array.lvskripts"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.array.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#parameter-binding-element"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"parameter-object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-element-propertyName"
						},
						{
							"include": "#parameter-binding-element"
						},
						{
							"include": "#paren-expression"
						}
					]
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#parameter-array-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"destructuring-parameter-rest": {
			"match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "variable.parameter.lvskripts"
				}
			}
		},
		"parameter-object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#parameter-object-binding-element"
				}
			]
		},
		"parameter-array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.lvskripts"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#parameter-binding-element"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"field-declaration": {
			"name": "meta.field.declaration.lvskripts",
			"begin": "(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(lasīttikai)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.lvskripts"
				}
			},
			"end": "(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})",
			"patterns": [
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#comment"
				},
				{
					"match": "(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*\n# funkcija assignment |\n(=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn tips: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"captures": {
						"1": {
							"name": "meta.definition.property.lvskripts entity.name.function.lvskripts"
						},
						"2": {
							"name": "keyword.operator.optional.lvskripts"
						},
						"3": {
							"name": "keyword.operator.definiteassignment.lvskripts"
						}
					}
				},
				{
					"name": "meta.definition.property.lvskripts variable.object.property.lvskripts",
					"match": "\\#?[_$[:alpha:]][_$[:alnum:]]*"
				},
				{
					"name": "keyword.operator.optional.lvskripts",
					"match": "\\?"
				},
				{
					"name": "keyword.operator.definiteassignment.lvskripts",
					"match": "\\!"
				}
			]
		},
		"variable-initializer": {
			"patterns": [
				{
					"begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.lvskripts"
						}
					},
					"end": "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "(?<!=|!)(=)(?!=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.lvskripts"
						}
					},
					"end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(no|iekš)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?(?:(asinhrons)\\s+)?(funkcija\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.modifier.async.lvskripts"
				},
				"4": {
					"name": "storage.type.function.lvskripts"
				},
				"5": {
					"name": "keyword.generator.asterisk.lvskripts"
				},
				"6": {
					"name": "meta.definition.function.lvskripts entity.name.function.lvskripts"
				}
			},
			"end": "(?=;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))|(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-expression": {
			"name": "meta.function.expression.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asinhrons)\\s+)?(funkcija\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.async.lvskripts"
				},
				"2": {
					"name": "storage.type.function.lvskripts"
				},
				"3": {
					"name": "keyword.generator.asterisk.lvskripts"
				},
				"4": {
					"name": "meta.definition.function.lvskripts entity.name.function.lvskripts"
				}
			},
			"end": "(?=;)|(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#single-line-comment-consuming-line-ending"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-name": {
			"name": "meta.definition.function.lvskripts entity.name.function.lvskripts",
			"match": "[_$[:alpha:]][_$[:alnum:]]*"
		},
		"function-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"include": "#decl-block"
				},
				{
					"name": "keyword.generator.asterisk.lvskripts",
					"match": "\\*"
				}
			]
		},
		"method-declaration": {
			"patterns": [
				{
					"name": "meta.method.declaration.lvskripts",
					"begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(pārrakstīt)\\s+)?(?:\\b(publisks|privāts|aizsargāts)\\s+)?(?:\\b(abstrakts)\\s+)?(?:\\b(asinhrons)\\s+)?\\s*\\b(konstruktors)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "storage.modifier.lvskripts"
						},
						"4": {
							"name": "storage.modifier.async.lvskripts"
						},
						"5": {
							"name": "storage.type.lvskripts"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#method-declaration-name"
						},
						{
							"include": "#function-body"
						}
					]
				},
				{
					"name": "meta.method.declaration.lvskripts",
					"begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(pārrakstīt)\\s+)?(?:\\b(publisks|privāts|aizsargāts)\\s+)?(?:\\b(abstrakts)\\s+)?(?:\\b(asinhrons)\\s+)?(?:(?:\\s*\\b(jauns)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "storage.modifier.lvskripts"
						},
						"4": {
							"name": "storage.modifier.async.lvskripts"
						},
						"5": {
							"name": "keyword.operator.new.lvskripts"
						},
						"6": {
							"name": "keyword.generator.asterisk.lvskripts"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#method-declaration-name"
						},
						{
							"include": "#function-body"
						}
					]
				},
				{
					"name": "meta.method.declaration.lvskripts",
					"begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(pārrakstīt)\\s+)?(?:\\b(publisks|privāts|aizsargāts)\\s+)?(?:\\b(abstrakts)\\s+)?(?:\\b(asinhrons)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "storage.modifier.lvskripts"
						},
						"4": {
							"name": "storage.modifier.async.lvskripts"
						},
						"5": {
							"name": "storage.type.property.lvskripts"
						},
						"6": {
							"name": "keyword.generator.asterisk.lvskripts"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#method-declaration-name"
						},
						{
							"include": "#function-body"
						}
					]
				}
			]
		},
		"object-literal-method-declaration": {
			"name": "meta.method.declaration.lvskripts",
			"begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(asinhrons)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.async.lvskripts"
				},
				"2": {
					"name": "storage.type.property.lvskripts"
				},
				"3": {
					"name": "keyword.generator.asterisk.lvskripts"
				}
			},
			"end": "(?=\\}|;|,)|(?<=\\})",
			"patterns": [
				{
					"include": "#method-declaration-name"
				},
				{
					"include": "#function-body"
				},
				{
					"begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(asinhrons)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.lvskripts"
						},
						"2": {
							"name": "storage.type.property.lvskripts"
						},
						"3": {
							"name": "keyword.generator.asterisk.lvskripts"
						}
					},
					"end": "(?=\\(|\\<)",
					"patterns": [
						{
							"include": "#method-declaration-name"
						}
					]
				}
			]
		},
		"method-declaration-name": {
			"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"name": "meta.definition.method.lvskripts entity.name.function.lvskripts",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				},
				{
					"name": "keyword.operator.optional.lvskripts",
					"match": "\\?"
				}
			]
		},
		"arrow-function": {
			"patterns": [
				{
					"name": "meta.arrow.lvskripts",
					"match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basinhrons)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
					"captures": {
						"1": {
							"name": "storage.modifier.async.lvskripts"
						},
						"2": {
							"name": "variable.parameter.lvskripts"
						}
					}
				},
				{
					"name": "meta.arrow.lvskripts",
					"begin": "(?x) (?:\n  (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basinhrons)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  )\n)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.lvskripts"
						}
					},
					"end": "(?==>|\\{|(^\\s*(eksportēt|funkcija|klase|saskarne|mainīgais|var|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|konstante|importēt|uzskaitījums|nosaukumtelpa|modulis|tips|abstrakts|deklarēt)\\s+))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameters"
						},
						{
							"include": "#function-parameters"
						},
						{
							"include": "#arrow-return-type"
						},
						{
							"include": "#possibly-arrow-return-type"
						}
					]
				},
				{
					"name": "meta.arrow.lvskripts",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.lvskripts"
						}
					},
					"end": "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])",
					"patterns": [
						{
							"include": "#single-line-comment-consuming-line-ending"
						},
						{
							"include": "#decl-block"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"indexer-declaration": {
			"name": "meta.indexer.declaration.lvskripts",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(lasīttikai)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.lvskripts"
				},
				"2": {
					"name": "meta.brace.square.lvskripts"
				},
				"3": {
					"name": "variable.parameter.lvskripts"
				}
			},
			"end": "(\\])\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.lvskripts"
				},
				"2": {
					"name": "keyword.operator.optional.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#type-annotation"
				}
			]
		},
		"indexer-mapped-type-declaration": {
			"name": "meta.indexer.mappedtype.declaration.lvskripts",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(lasīttikai)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(iekš)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.modifier.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "meta.brace.square.lvskripts"
				},
				"4": {
					"name": "entity.name.type.lvskripts"
				},
				"5": {
					"name": "keyword.operator.expression.in.lvskripts"
				}
			},
			"end": "(\\])([+-])?\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.lvskripts"
				},
				"2": {
					"name": "keyword.operator.type.modifier.lvskripts"
				},
				"3": {
					"name": "keyword.operator.optional.lvskripts"
				}
			},
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(kā)\\s+",
					"captures": {
						"1": {
							"name": "keyword.control.as.lvskripts"
						}
					}
				},
				{
					"include": "#type"
				}
			]
		},
		"function-parameters": {
			"name": "meta.parameters.lvskripts",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.lvskripts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#function-parameters-body"
				}
			]
		},
		"function-parameters-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"include": "#parameter-name"
				},
				{
					"include": "#parameter-type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.lvskripts",
					"match": ","
				}
			]
		},
		"class-declaration": {
			"name": "meta.class.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(?:(abstrakts)\\s+)?\\b(klase)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.modifier.lvskripts"
				},
				"4": {
					"name": "storage.type.class.lvskripts"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-expression": {
			"name": "meta.class.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstrakts)\\s+)?(klase)\\b(?=\\s+|[<{]|\\/[\\/*])",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.lvskripts"
				},
				"2": {
					"name": "storage.type.class.lvskripts"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-declaration-or-expression-patterns": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "[_$[:alpha:]][_$[:alnum:]]*",
					"captures": {
						"0": {
							"name": "entity.name.type.class.lvskripts"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"interface-declaration": {
			"name": "meta.interface.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(?:(abstrakts)\\s+)?\\b(saskarne)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.modifier.lvskripts"
				},
				"4": {
					"name": "storage.type.interface.lvskripts"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "[_$[:alpha:]][_$[:alnum:]]*",
					"captures": {
						"0": {
							"name": "entity.name.type.interface.lvskripts"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"class-or-interface-heritage": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(paplašina|implementē)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.lvskripts"
				}
			},
			"end": "(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)",
					"captures": {
						"1": {
							"name": "entity.name.type.module.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.optional.lvskripts"
						}
					}
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "entity.other.inherited-class.lvskripts"
						}
					}
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"class-or-interface-body": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"begin": "(?<=:)\\s*",
					"end": "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#string"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#access-modifier"
				},
				{
					"include": "#property-accessor"
				},
				{
					"include": "#async-modifier"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"access-modifier": {
			"name": "storage.modifier.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstrakts|deklarēt|pārrakstīt|publisks|aizsargāts|privāts|lasīttikai|statisks)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"property-accessor": {
			"name": "storage.type.property.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"async-modifier": {
			"name": "storage.modifier.async.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asinhrons)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"enum-declaration": {
			"name": "meta.enum.declaration.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?(?:\\b(konstante)\\s+)?\\b(uzskaitījums)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.modifier.lvskripts"
				},
				"4": {
					"name": "storage.type.enum.lvskripts"
				},
				"5": {
					"name": "entity.name.type.enum.lvskripts"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.lvskripts"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.enummember.lvskripts"
								}
							},
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"begin": "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"namespace-declaration": {
			"name": "meta.namespace.declaration.lvskripts",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(nosaukumtelpa|modulis)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.type.namespace.lvskripts"
				}
			},
			"end": "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.lvskripts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"type-alias-declaration": {
			"name": "meta.type.declaration.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(tips)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "storage.type.type.lvskripts"
				},
				"4": {
					"name": "entity.name.type.alias.lvskripts"
				}
			},
			"end": "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"begin": "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.lvskripts"
						},
						"2": {
							"name": "keyword.control.intrinsic.lvskripts"
						}
					},
					"end": "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"begin": "(=)\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.lvskripts"
						}
					},
					"end": "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"import-equals-declaration": {
			"patterns": [
				{
					"name": "meta.import-equals.external.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(importēt)(?:\\s+(tips))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(pieprasīt)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "keyword.control.import.lvskripts"
						},
						"4": {
							"name": "keyword.control.type.lvskripts"
						},
						"5": {
							"name": "variable.other.readwrite.alias.lvskripts"
						},
						"6": {
							"name": "keyword.operator.assignment.lvskripts"
						},
						"7": {
							"name": "keyword.control.require.lvskripts"
						},
						"8": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.import-equals.internal.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(importēt)(?:\\s+(tips))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!pieprasīt\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						},
						"3": {
							"name": "keyword.control.import.lvskripts"
						},
						"4": {
							"name": "keyword.control.type.lvskripts"
						},
						"5": {
							"name": "variable.other.readwrite.alias.lvskripts"
						},
						"6": {
							"name": "keyword.operator.assignment.lvskripts"
						}
					},
					"end": "(?=;|$|^)",
					"patterns": [
						{
							"include": "#single-line-comment-consuming-line-ending"
						},
						{
							"include": "#comment"
						},
						{
							"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
							"captures": {
								"1": {
									"name": "entity.name.type.module.lvskripts"
								},
								"2": {
									"name": "punctuation.accessor.lvskripts"
								},
								"3": {
									"name": "punctuation.accessor.optional.lvskripts"
								}
							}
						},
						{
							"name": "variable.other.readwrite.lvskripts",
							"match": "([_$[:alpha:]][_$[:alnum:]]*)"
						}
					]
				}
			]
		},
		"import-declaration": {
			"name": "meta.import.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\beksportēt)\\s+)?(?:(\\bdeklarēt)\\s+)?\\b(importēt)(?:\\s+(tips)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.lvskripts"
				},
				"2": {
					"name": "storage.modifier.lvskripts"
				},
				"3": {
					"name": "keyword.control.import.lvskripts"
				},
				"4": {
					"name": "keyword.control.type.lvskripts"
				}
			},
			"end": "(?<!^importēt|[^\\._$[:alnum:]]importēt)(?=;|$|^)",
			"patterns": [
				{
					"include": "#single-line-comment-consuming-line-ending"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"begin": "(?<=^importēt|[^\\._$[:alnum:]]importēt)(?!\\s*[\"'])",
					"end": "\\bfrom\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.from.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#import-export-declaration"
						}
					]
				},
				{
					"include": "#import-export-declaration"
				}
			]
		},
		"export-declaration": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(eksportēt)\\s+(kā)\\s+(nosaukumtelpa)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "keyword.control.as.lvskripts"
						},
						"3": {
							"name": "storage.type.namespace.lvskripts"
						},
						"4": {
							"name": "entity.name.type.module.lvskripts"
						}
					}
				},
				{
					"name": "meta.export.default.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(eksportēt)(?:\\s+(tips))?(?:(?:\\s*(=))|(?:\\s+(noklusējums)(?=\\s+)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "keyword.control.type.lvskripts"
						},
						"3": {
							"name": "keyword.operator.assignment.lvskripts"
						},
						"4": {
							"name": "keyword.control.default.lvskripts"
						}
					},
					"end": "(?=$|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#interface-declaration"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.export.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(eksportēt)(?:\\s+(tips))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.lvskripts"
						},
						"2": {
							"name": "keyword.control.type.lvskripts"
						}
					},
					"end": "(?=$|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
					"patterns": [
						{
							"include": "#import-export-declaration"
						}
					]
				}
			]
		},
		"import-export-declaration": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#import-export-block"
				},
				{
					"name": "keyword.control.from.lvskripts",
					"match": "\\bfrom\\b"
				},
				{
					"include": "#import-export-assert-clause"
				},
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-assert-clause": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.with.lvskripts"
				},
				"2": {
					"name": "keyword.control.assert.lvskripts"
				},
				"3": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "meta.object-literal.key.lvskripts",
					"match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)"
				},
				{
					"name": "punctuation.separator.key-value.lvskripts",
					"match": ":"
				}
			]
		},
		"import-export-block": {
			"name": "meta.block.lvskripts",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-clause": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btips)\\s+)?(?:(\\bnoklusējums)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)|((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))))\\s+(kā)\\s+(?:(noklusējums(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*)|((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))",
					"captures": {
						"1": {
							"name": "keyword.control.type.lvskripts"
						},
						"2": {
							"name": "keyword.control.default.lvskripts"
						},
						"3": {
							"name": "constant.language.import-export-all.lvskripts"
						},
						"4": {
							"name": "variable.other.readwrite.lvskripts"
						},
						"5": {
							"name": "string.quoted.alias.lvskripts"
						},
						"12": {
							"name": "keyword.control.as.lvskripts"
						},
						"13": {
							"name": "keyword.control.default.lvskripts"
						},
						"14": {
							"name": "variable.other.readwrite.alias.lvskripts"
						},
						"15": {
							"name": "string.quoted.alias.lvskripts"
						}
					}
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"name": "constant.language.import-export-all.lvskripts",
					"match": "\\*"
				},
				{
					"name": "keyword.control.default.lvskripts",
					"match": "\\b(noklusējums)\\b"
				},
				{
					"match": "(?:(\\btips)\\s+)?(?:([_$[:alpha:]][_$[:alnum:]]*)|((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))",
					"captures": {
						"1": {
							"name": "keyword.control.type.lvskripts"
						},
						"2": {
							"name": "variable.other.readwrite.alias.lvskripts"
						},
						"3": {
							"name": "string.quoted.alias.lvskripts"
						}
					}
				}
			]
		},
		"switch-statement": {
			"name": "switch-statement.expr.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bizvēle\\s*\\()",
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "switch-expression.expr.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(izvēle)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.switch.lvskripts"
						},
						"2": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "switch-block.expr.lvskripts",
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.lvskripts"
						}
					},
					"end": "(?=\\})",
					"patterns": [
						{
							"name": "case-clause.expr.lvskripts",
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(gadījums|noklusējums(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.switch.lvskripts"
								}
							},
							"end": "(?=:)",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						{
							"begin": "(:)\\s*(\\{)",
							"beginCaptures": {
								"1": {
									"name": "case-clause.expr.lvskripts punctuation.definition.section.case-statement.lvskripts"
								},
								"2": {
									"name": "meta.block.lvskripts punctuation.definition.block.lvskripts"
								}
							},
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "meta.block.lvskripts punctuation.definition.block.lvskripts"
								}
							},
							"contentName": "meta.block.lvskripts",
							"patterns": [
								{
									"include": "#statements"
								}
							]
						},
						{
							"match": "(:)",
							"captures": {
								"0": {
									"name": "case-clause.expr.lvskripts punctuation.definition.section.case-statement.lvskripts"
								}
							}
						},
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"for-loop": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))priekš(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))gaidīt)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.loop.lvskripts"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "keyword.control.loop.lvskripts",
					"match": "gaidīt"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#var-expr"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-semicolon"
						}
					]
				}
			]
		},
		"if-statement": {
			"patterns": [
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))",
					"end": "(?=;|$|\\})",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(ja)\\s*(\\()",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.conditional.lvskripts"
								},
								"2": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						{
							"name": "string.regexp.lvskripts",
							"begin": "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuvy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.lvskripts"
								}
							},
							"end": "(/)([dgimsuvy]*)",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.string.end.lvskripts"
								},
								"2": {
									"name": "keyword.other.lvskripts"
								}
							},
							"patterns": [
								{
									"include": "#regexp"
								}
							]
						},
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"decl-block": {
			"name": "meta.block.lvskripts",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"after-operator-block-as-object-literal": {
			"name": "meta.objectliteral.lvskripts",
			"begin": "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^gaidīt|[^\\._$[:alnum:]]gaidīt|^atgriezt|[^\\._$[:alnum:]]atgriezt|^atdot|[^\\._$[:alnum:]]atdot|^mest|[^\\._$[:alnum:]]mest|^iekš|[^\\._$[:alnum:]]iekš|^no|[^\\._$[:alnum:]]no|^tipa|[^\\._$[:alnum:]]tipa|&&|\\|\\||\\*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"object-literal": {
			"name": "meta.objectliteral.lvskripts",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"object-member": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#object-literal-method-declaration"
				},
				{
					"name": "meta.object.member.lvskripts meta.object-literal.key.lvskripts",
					"begin": "(?=\\[)",
					"end": "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#array-literal"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts meta.object-literal.key.lvskripts",
					"begin": "(?=[\\'\\\"\\`])",
					"end": "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(kā|satisifies)\\s+))))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts meta.object-literal.key.lvskripts",
					"begin": "(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)))",
					"end": "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+kā|satisifies\\s+))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#numeric-literal"
						}
					]
				},
				{
					"name": "meta.method.declaration.lvskripts",
					"begin": "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
					"end": "(?=\\}|;|,)|(?<=\\})",
					"patterns": [
						{
							"include": "#function-body"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts",
					"match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.lvskripts"
						},
						"1": {
							"name": "constant.numeric.decimal.lvskripts"
						}
					}
				},
				{
					"name": "meta.object.member.lvskripts",
					"match": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.lvskripts"
						},
						"1": {
							"name": "entity.name.function.lvskripts"
						}
					}
				},
				{
					"name": "meta.object.member.lvskripts",
					"match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.lvskripts"
						}
					}
				},
				{
					"name": "meta.object.member.lvskripts",
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.lvskripts"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)",
					"captures": {
						"1": {
							"name": "variable.other.readwrite.lvskripts"
						}
					}
				},
				{
					"name": "meta.object.member.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(kā)\\s+(konstante)(?=\\s*([,}]|$))",
					"captures": {
						"1": {
							"name": "keyword.control.as.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						}
					}
				},
				{
					"name": "meta.object.member.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(kā)|(apmierina))\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.as.lvskripts"
						},
						"2": {
							"name": "keyword.control.satisfies.lvskripts"
						}
					},
					"end": "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(kā|satisifies)\\s+))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts",
					"begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
					"end": "(?=,|\\}|$|\\/\\/|\\/\\*)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.lvskripts",
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "meta.object-literal.key.lvskripts punctuation.separator.key-value.lvskripts"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"begin": "(?<=:)\\s*(asinhrons)?(?=\\s*(<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
							"beginCaptures": {
								"1": {
									"name": "storage.modifier.async.lvskripts"
								}
							},
							"end": "(?<=\\))",
							"patterns": [
								{
									"include": "#type-parameters"
								},
								{
									"begin": "\\(",
									"beginCaptures": {
										"0": {
											"name": "meta.brace.round.lvskripts"
										}
									},
									"end": "\\)",
									"endCaptures": {
										"0": {
											"name": "meta.brace.round.lvskripts"
										}
									},
									"patterns": [
										{
											"include": "#expression-inside-possibly-arrow-parens"
										}
									]
								}
							]
						},
						{
							"begin": "(?<=:)\\s*(asinhrons)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
							"beginCaptures": {
								"1": {
									"name": "storage.modifier.async.lvskripts"
								},
								"2": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"patterns": [
								{
									"include": "#expression-inside-possibly-arrow-parens"
								}
							]
						},
						{
							"begin": "(?<=:)\\s*(asinhrons)?\\s*(?=\\<\\s*$)",
							"beginCaptures": {
								"1": {
									"name": "storage.modifier.async.lvskripts"
								}
							},
							"end": "(?<=\\>)",
							"patterns": [
								{
									"include": "#type-parameters"
								}
							]
						},
						{
							"begin": "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
							"beginCaptures": {
								"1": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "meta.brace.round.lvskripts"
								}
							},
							"patterns": [
								{
									"include": "#expression-inside-possibly-arrow-parens"
								}
							]
						},
						{
							"include": "#possibly-arrow-return-type"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.ternary.lvskripts"
				}
			},
			"end": "\\s*(:)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.ternary.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
					"end": "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
					"patterns": [
						{
							"name": "meta.function-call.lvskripts",
							"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
							"end": "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
							"patterns": [
								{
									"include": "#function-call-target"
								}
							]
						},
						{
							"include": "#comment"
						},
						{
							"include": "#function-call-optionals"
						},
						{
							"include": "#type-arguments"
						},
						{
							"include": "#paren-expression"
						}
					]
				},
				{
					"begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
					"end": "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
					"patterns": [
						{
							"name": "meta.function-call.lvskripts",
							"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
							"end": "(?=(<\\s*[\\{\\[\\(]\\s*$))",
							"patterns": [
								{
									"include": "#function-call-target"
								}
							]
						},
						{
							"include": "#comment"
						},
						{
							"include": "#function-call-optionals"
						},
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"function-call-target": {
			"patterns": [
				{
					"include": "#support-function-call-identifiers"
				},
				{
					"name": "entity.name.function.lvskripts",
					"match": "(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		},
		"function-call-optionals": {
			"patterns": [
				{
					"name": "meta.function-call.lvskripts punctuation.accessor.optional.lvskripts",
					"match": "\\?\\."
				},
				{
					"name": "meta.function-call.lvskripts keyword.operator.definiteassignment.lvskripts",
					"match": "\\!"
				}
			]
		},
		"support-function-call-identifiers": {
			"patterns": [
				{
					"include": "#literal"
				},
				{
					"include": "#support-objects"
				},
				{
					"include": "#object-identifiers"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"name": "keyword.operator.expression.import.lvskripts",
					"match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))importēt(?=\\s*[\\(]\\s*[\\\"\\'\\`]))"
				}
			]
		},
		"new-expr": {
			"name": "new.expr.lvskripts",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(jauns)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.new.lvskripts"
				}
			},
			"end": "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))jauns(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"instanceof-expr": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceno)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.instanceof.lvskripts"
				}
			},
			"end": "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceno(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"paren-expression-possibly-arrow": {
			"patterns": [
				{
					"begin": "(?<=[(=,])\\s*(asinhrons)?(?=\\s*((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.lvskripts"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#paren-expression-possibly-arrow-with-typeparameters"
						}
					]
				},
				{
					"begin": "(?<=[(=,]|=>|^atgriezt|[^\\._$[:alnum:]]atgriezt)\\s*(asinhrons)?(?=\\s*((((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.lvskripts"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#paren-expression-possibly-arrow-with-typeparameters"
						}
					]
				},
				{
					"include": "#possibly-arrow-return-type"
				}
			]
		},
		"paren-expression-possibly-arrow-with-typeparameters": {
			"patterns": [
				{
					"include": "#type-parameters"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#expression-inside-possibly-arrow-parens"
						}
					]
				}
			]
		},
		"expression-inside-possibly-arrow-parens": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|aizsargāts|privāts|lasīttikai)\\s+(?=(pārrakstīt|publisks|aizsargāts|privāts|lasīttikai)\\s+)",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# funkcija assignment |\n(=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn tips: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "entity.name.function.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "entity.name.function.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(pārrakstīt|publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "variable.parameter.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "variable.parameter.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.lvskripts",
					"match": ","
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.lvskripts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"cast": {
			"patterns": [
				{
					"include": "#jsx"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.control.flow.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(gaidīt)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(atdot)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.flow.lvskripts"
						}
					},
					"end": "\\*",
					"endCaptures": {
						"0": {
							"name": "keyword.generator.asterisk.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						}
					]
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(atdot)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?",
					"captures": {
						"1": {
							"name": "keyword.control.flow.lvskripts"
						},
						"2": {
							"name": "keyword.generator.asterisk.lvskripts"
						}
					}
				},
				{
					"name": "keyword.operator.expression.delete.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))dzēst(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.operator.expression.in.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))iekš(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
				},
				{
					"name": "keyword.operator.expression.of.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))no(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
				},
				{
					"name": "keyword.operator.expression.instanceof.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceno(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.operator.new.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))jauns(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.expression.void.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))tukšums(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(kā)\\s+(konstante)(?=\\s*($|[;,:})\\]]))",
					"captures": {
						"1": {
							"name": "keyword.control.as.lvskripts"
						},
						"2": {
							"name": "storage.modifier.lvskripts"
						}
					}
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(kā)|(apmierina))\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.as.lvskripts"
						},
						"2": {
							"name": "keyword.control.satisfies.lvskripts"
						}
					},
					"end": "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(kā|apmierina)\\s+)|(\\s+\\<))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "keyword.operator.spread.lvskripts",
					"match": "\\.\\.\\."
				},
				{
					"name": "keyword.operator.assignment.compound.lvskripts",
					"match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.lvskripts",
					"match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.lvskripts",
					"match": "<<|>>>|>>"
				},
				{
					"name": "keyword.operator.comparison.lvskripts",
					"match": "===|!==|==|!="
				},
				{
					"name": "keyword.operator.relational.lvskripts",
					"match": "<=|>=|<>|<|>"
				},
				{
					"match": "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))",
					"captures": {
						"1": {
							"name": "keyword.operator.logical.lvskripts"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.lvskripts"
						},
						"3": {
							"name": "keyword.operator.arithmetic.lvskripts"
						}
					}
				},
				{
					"name": "keyword.operator.logical.lvskripts",
					"match": "\\!|&&|\\|\\||\\?\\?"
				},
				{
					"name": "keyword.operator.bitwise.lvskripts",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.lvskripts",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.lvskripts",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.lvskripts",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.lvskripts",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"begin": "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
					"end": "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.assignment.compound.lvskripts"
						},
						"2": {
							"name": "keyword.operator.arithmetic.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						}
					]
				},
				{
					"match": "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))",
					"captures": {
						"1": {
							"name": "keyword.operator.assignment.compound.lvskripts"
						},
						"2": {
							"name": "keyword.operator.arithmetic.lvskripts"
						}
					}
				}
			]
		},
		"typeof-operator": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))tipa(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.expression.typeof.lvskripts"
				}
			},
			"end": "(?=[,);}\\]=>:&|{\\?]|(paplašina\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstrakts|asinhrons|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|pārtraukt|gadījums|noķert|klase|konstante|izlaist|deklarēt|darīt|citādi|uzskaitījums|eksportēt|beigās|funkcija|priekš|aiziet|ja|importēt|saskarne|mainīgais|modulis|nosaukumtelpa|izvēle|atgriezt|mest|mēģināt|tips|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|var|kamēr)\\b))",
			"patterns": [
				{
					"include": "#type-arguments"
				},
				{
					"include": "#expression"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#undefined-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#this-literal"
				},
				{
					"include": "#super-literal"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.lvskripts",
			"begin": "\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.square.lvskripts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.lvskripts",
					"match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.lvskripts"
						}
					}
				},
				{
					"name": "constant.numeric.binary.lvskripts",
					"match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.lvskripts"
						}
					}
				},
				{
					"name": "constant.numeric.octal.lvskripts",
					"match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.lvskripts"
						}
					}
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.lvskripts"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"2": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"4": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"6": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"7": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"8": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"9": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"10": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"11": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"12": {
							"name": "meta.delimiter.decimal.period.lvskripts"
						},
						"13": {
							"name": "storage.type.numeric.bigint.lvskripts"
						},
						"14": {
							"name": "storage.type.numeric.bigint.lvskripts"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))patiess(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))nepatiess(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))nav(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"this-literal": {
			"name": "variable.language.this.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))šis\\b(?!\\$)"
		},
		"super-literal": {
			"name": "variable.language.super.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))virsējais\\b(?!\\$)"
		},
		"undefined-literal": {
			"name": "constant.language.undefined.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))nedefinēts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))necipars(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.infinity.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Bezgalība(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"support-objects": {
			"patterns": [
				{
					"name": "variable.language.arguments.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(argumenti)\\b(?!\\$)"
				},
				{
					"name": "support.class.promise.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Solījums)\\b(?!\\$)"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(importēt)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "keyword.control.import.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"4": {
							"name": "support.variable.property.importmeta.lvskripts"
						}
					}
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(jauns)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "keyword.operator.new.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"4": {
							"name": "support.variable.property.target.lvskripts"
						}
					}
				},
				{
					"match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (?:(konstruktors|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())\n  |\n  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))",
					"captures": {
						"1": {
							"name": "punctuation.accessor.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"3": {
							"name": "support.variable.property.lvskripts"
						},
						"4": {
							"name": "support.constant.lvskripts"
						}
					}
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(modulis)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.type.object.module.lvskripts"
						},
						"2": {
							"name": "support.type.object.module.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.lvskripts"
						},
						"4": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"5": {
							"name": "support.type.object.module.lvskripts"
						}
					}
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"include": "#object-identifiers"
				},
				{
					"match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((asinhrons\\s+)?(\n    (funkcija\\s*[(<*]) |\n    (funkcija\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((asinhrons\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even ja => is on jauns line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+paplašina\\s*[^=>]                                                              # < typeparam paplašina\n) |\n# arrow funkcija possible to detect only with => on same line\n(\n  (<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((konstante\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # atgriezt tips\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
					"captures": {
						"1": {
							"name": "punctuation.accessor.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"3": {
							"name": "entity.name.function.lvskripts"
						}
					}
				},
				{
					"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"captures": {
						"1": {
							"name": "punctuation.accessor.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"3": {
							"name": "variable.other.constant.property.lvskripts"
						}
					}
				},
				{
					"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"3": {
							"name": "variable.other.property.lvskripts"
						}
					}
				},
				{
					"name": "variable.other.constant.lvskripts",
					"match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.readwrite.lvskripts",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"object-identifiers": {
			"patterns": [
				{
					"name": "support.class.lvskripts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))"
				},
				{
					"match": "(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"3": {
							"name": "variable.other.constant.object.property.lvskripts"
						},
						"4": {
							"name": "variable.other.object.property.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "variable.other.constant.object.lvskripts"
						},
						"2": {
							"name": "variable.other.object.lvskripts"
						}
					}
				}
			]
		},
		"type-annotation": {
			"patterns": [
				{
					"name": "meta.type.annotation.lvskripts",
					"begin": "(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.lvskripts"
						}
					},
					"end": "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "meta.type.annotation.lvskripts",
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.lvskripts"
						}
					},
					"end": "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"parameter-type-annotation": {
			"patterns": [
				{
					"name": "meta.type.annotation.lvskripts",
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.lvskripts"
						}
					},
					"end": "(?=[,)])|(?==[^>])",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"return-type": {
			"patterns": [
				{
					"name": "meta.return.type.lvskripts",
					"begin": "(?<=\\))\\s*(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.lvskripts"
						}
					},
					"end": "(?<![:|&])(?=$|^|[{};,]|//)",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				},
				{
					"name": "meta.return.type.lvskripts",
					"begin": "(?<=\\))\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.lvskripts"
						}
					},
					"end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				}
			]
		},
		"return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<=[:|&])(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"arrow-return-type": {
			"name": "meta.return.type.arrow.lvskripts",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.lvskripts"
				}
			},
			"end": "(?==>|\\{|(^\\s*(eksportēt|funkcija|klase|saskarne|mainīgais|var|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|konstante|importēt|uzskaitījums|nosaukumtelpa|modulis|tips|abstrakts|deklarēt)\\s+))",
			"patterns": [
				{
					"include": "#arrow-return-type-body"
				}
			]
		},
		"possibly-arrow-return-type": {
			"begin": "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)",
			"beginCaptures": {
				"1": {
					"name": "meta.arrow.lvskripts meta.return.type.arrow.lvskripts keyword.operator.type.annotation.lvskripts"
				}
			},
			"end": "(?==>|\\{|(^\\s*(eksportēt|funkcija|klase|saskarne|mainīgais|var|(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)|(?:\\bgaidīt\\s+(?:\\busing(?=\\s+(?!iekš\\b|no\\b(?!\\s*(?:no\\b|=)))[_$[:alpha:]])\\b)\\b)|konstante|importēt|uzskaitījums|nosaukumtelpa|modulis|tips|abstrakts|deklarēt)\\s+))",
			"contentName": "meta.arrow.lvskripts meta.return.type.arrow.lvskripts",
			"patterns": [
				{
					"include": "#arrow-return-type-body"
				}
			]
		},
		"arrow-return-type-body": {
			"patterns": [
				{
					"begin": "(?<=[:])(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-parameters": {
			"name": "meta.type.parameters.lvskripts",
			"begin": "(<)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.begin.lvskripts"
				}
			},
			"end": "(>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.end.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "storage.modifier.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(paplašina|iekš|out|konstante)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"name": "keyword.operator.assignment.lvskripts",
					"match": "(=)(?!>)"
				}
			]
		},
		"type-arguments": {
			"name": "meta.type.parameters.lvskripts",
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.lvskripts"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#type-arguments-body"
				}
			]
		},
		"type-arguments-body": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"0": {
							"name": "keyword.operator.type.lvskripts"
						}
					}
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-builtin-literals"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type-tuple"
				},
				{
					"include": "#type-object"
				},
				{
					"include": "#type-operators"
				},
				{
					"include": "#type-conditional"
				},
				{
					"include": "#type-fn-type-parameters"
				},
				{
					"include": "#type-paren-or-function-parameters"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(lasīttikai)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						}
					}
				},
				{
					"include": "#type-name"
				}
			]
		},
		"type-primitive": {
			"name": "support.type.primitive.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|tukšums|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"type-builtin-literals": {
			"name": "support.type.builtin.lvskripts",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(šis|patiess|nepatiess|nedefinēts|nav|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"type-tuple": {
			"name": "meta.type.tuple.lvskripts",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.lvskripts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.lvskripts"
				}
			},
			"patterns": [
				{
					"name": "keyword.operator.rest.lvskripts",
					"match": "\\.\\.\\."
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)",
					"captures": {
						"1": {
							"name": "entity.name.label.lvskripts"
						},
						"2": {
							"name": "keyword.operator.optional.lvskripts"
						},
						"3": {
							"name": "punctuation.separator.label.lvskripts"
						}
					}
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-object": {
			"name": "meta.object.type.lvskripts",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#indexer-mapped-type-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.lvskripts"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-conditional": {
			"patterns": [
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(paplašina)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						}
					},
					"end": "(?<=:)",
					"patterns": [
						{
							"begin": "\\?",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.ternary.lvskripts"
								}
							},
							"end": ":",
							"endCaptures": {
								"0": {
									"name": "keyword.operator.ternary.lvskripts"
								}
							},
							"patterns": [
								{
									"include": "#type"
								}
							]
						},
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"type-paren-or-function-parameters": {
			"name": "meta.type.paren.cover.lvskripts",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.lvskripts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.lvskripts"
				}
			},
			"patterns": [
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))funkcija(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "entity.name.function.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "entity.name.function.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(publisks|privāts|aizsargāts|lasīttikai)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)",
					"captures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.operator.rest.lvskripts"
						},
						"3": {
							"name": "variable.parameter.lvskripts variable.language.this.lvskripts"
						},
						"4": {
							"name": "variable.parameter.lvskripts"
						},
						"5": {
							"name": "keyword.operator.optional.lvskripts"
						}
					}
				},
				{
					"include": "#type-annotation"
				},
				{
					"name": "punctuation.separator.parameter.lvskripts",
					"match": ","
				},
				{
					"include": "#type"
				}
			]
		},
		"type-fn-type-parameters": {
			"patterns": [
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstrakts)\\s+)?(jauns)\\b(?=\\s*\\<)",
					"beginCaptures": {
						"1": {
							"name": "meta.type.constructor.lvskripts storage.modifier.lvskripts"
						},
						"2": {
							"name": "meta.type.constructor.lvskripts keyword.control.new.lvskripts"
						}
					},
					"end": "(?<=>)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameters"
						}
					]
				},
				{
					"name": "meta.type.constructor.lvskripts",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstrakts)\\s+)?(jauns)\\b\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lvskripts"
						},
						"2": {
							"name": "keyword.control.new.lvskripts"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.lvskripts",
					"begin": "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				}
			]
		},
		"type-function-return-type": {
			"patterns": [
				{
					"name": "meta.type.function.return.lvskripts",
					"begin": "(=>)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.arrow.lvskripts"
						}
					},
					"end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				},
				{
					"name": "meta.type.function.return.lvskripts",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.lvskripts"
						}
					},
					"end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				}
			]
		},
		"type-function-return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<==>)(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-operators": {
			"patterns": [
				{
					"include": "#typeof-operator"
				},
				{
					"include": "#type-infer"
				},
				{
					"begin": "([&|])(?=\\s*\\{)",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.lvskripts"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"begin": "[&|]",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.lvskripts"
						}
					},
					"end": "(?=\\S)"
				},
				{
					"name": "keyword.operator.expression.keyof.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))atslēgano(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.operator.ternary.lvskripts",
					"match": "(\\?|\\:)"
				},
				{
					"name": "keyword.operator.expression.import.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))importēt(?=\\s*\\()"
				}
			]
		},
		"type-infer": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(paplašina)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?",
					"name": "meta.type.infer.lvskripts",
					"captures": {
						"1": {
							"name": "keyword.operator.expression.infer.lvskripts"
						},
						"2": {
							"name": "entity.name.type.lvskripts"
						},
						"3": {
							"name": "keyword.operator.expression.extends.lvskripts"
						}
					}
				}
			]
		},
		"type-predicate-operator": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"1": {
							"name": "keyword.operator.type.asserts.lvskripts"
						},
						"2": {
							"name": "variable.parameter.lvskripts variable.language.this.lvskripts"
						},
						"3": {
							"name": "variable.parameter.lvskripts"
						},
						"4": {
							"name": "keyword.operator.expression.is.lvskripts"
						}
					}
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(šis)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"1": {
							"name": "keyword.operator.type.asserts.lvskripts"
						},
						"2": {
							"name": "variable.parameter.lvskripts variable.language.this.lvskripts"
						},
						"3": {
							"name": "variable.parameter.lvskripts"
						}
					}
				},
				{
					"name": "keyword.operator.type.asserts.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.operator.expression.is.lvskripts",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"type-name": {
			"patterns": [
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)",
					"captures": {
						"1": {
							"name": "entity.name.type.module.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.optional.lvskripts"
						},
						"4": {
							"name": "meta.type.parameters.lvskripts punctuation.definition.typeparameters.begin.lvskripts"
						}
					},
					"end": "(>)",
					"endCaptures": {
						"1": {
							"name": "meta.type.parameters.lvskripts punctuation.definition.typeparameters.end.lvskripts"
						}
					},
					"contentName": "meta.type.parameters.lvskripts",
					"patterns": [
						{
							"include": "#type-arguments-body"
						}
					]
				},
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.lvskripts"
						},
						"2": {
							"name": "meta.type.parameters.lvskripts punctuation.definition.typeparameters.begin.lvskripts"
						}
					},
					"end": "(>)",
					"endCaptures": {
						"1": {
							"name": "meta.type.parameters.lvskripts punctuation.definition.typeparameters.end.lvskripts"
						}
					},
					"contentName": "meta.type.parameters.lvskripts",
					"patterns": [
						{
							"include": "#type-arguments-body"
						}
					]
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
					"captures": {
						"1": {
							"name": "entity.name.type.module.lvskripts"
						},
						"2": {
							"name": "punctuation.accessor.lvskripts"
						},
						"3": {
							"name": "punctuation.accessor.optional.lvskripts"
						}
					}
				},
				{
					"name": "entity.name.type.lvskripts",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.lvskripts",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.lvskripts",
			"match": ";"
		},
		"punctuation-accessor": {
			"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
			"captures": {
				"1": {
					"name": "punctuation.accessor.lvskripts"
				},
				"2": {
					"name": "punctuation.accessor.optional.lvskripts"
				}
			}
		},
		"string": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				},
				{
					"include": "#template"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.lvskripts",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lvskripts"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.lvskripts"
				},
				"2": {
					"name": "invalid.illegal.newline.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.lvskripts",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lvskripts"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.lvskripts"
				},
				"2": {
					"name": "invalid.illegal.newline.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.lvskripts",
			"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"template": {
			"patterns": [
				{
					"include": "#template-call"
				},
				{
					"contentName": "string.template.lvskripts",
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-template.lvskripts"
						},
						"2": {
							"name": "string.template.lvskripts punctuation.definition.string.template.begin.lvskripts"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "string.template.lvskripts punctuation.definition.string.template.end.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#template-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"template-call": {
			"patterns": [
				{
					"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
					"end": "(?=`)",
					"patterns": [
						{
							"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
							"end": "(?=(<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-template.lvskripts",
									"match": "([_$[:alpha:]][_$[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((atslēgano|infer|tipa|lasīttikai)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-template.lvskripts"
						}
					},
					"end": "(?=`)",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"template-substitution-element": {
			"name": "meta.template.expression.lvskripts",
			"begin": "\\$\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"contentName": "meta.embedded.line.lvskripts"
		},
		"type-string": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				},
				{
					"include": "#template-type"
				}
			]
		},
		"template-type": {
			"patterns": [
				{
					"include": "#template-call"
				},
				{
					"contentName": "string.template.lvskripts",
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-template.lvskripts"
						},
						"2": {
							"name": "string.template.lvskripts punctuation.definition.string.template.begin.lvskripts"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "string.template.lvskripts punctuation.definition.string.template.end.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#template-type-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"template-type-substitution-element": {
			"name": "meta.template.expression.lvskripts",
			"begin": "\\$\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin.lvskripts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end.lvskripts"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			],
			"contentName": "meta.embedded.line.lvskripts"
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regexp.lvskripts",
					"begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^atgriezt|[^\\._$[:alnum:]]atgriezt|^gadījums|[^\\._$[:alnum:]]gadījums|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuvy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.lvskripts"
						}
					},
					"end": "(/)([dgimsuvy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.lvskripts"
						},
						"2": {
							"name": "keyword.other.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regexp.lvskripts",
					"begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^atgriezt|[^\\._$[:alnum:]]atgriezt|^gadījums|[^\\._$[:alnum:]]gadījums))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuvy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lvskripts"
						}
					},
					"end": "(/)([dgimsuvy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.lvskripts"
						},
						"2": {
							"name": "keyword.other.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.lvskripts",
					"begin": "/\\*\\*(?!/)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lvskripts"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lvskripts"
						}
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.lvskripts",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.lvskripts"
						},
						"2": {
							"name": "storage.type.internaldeclaration.lvskripts"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.lvskripts"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lvskripts"
						}
					}
				},
				{
					"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.lvskripts"
						},
						"2": {
							"name": "comment.line.double-slash.lvskripts"
						},
						"3": {
							"name": "punctuation.definition.comment.lvskripts"
						},
						"4": {
							"name": "storage.type.internaldeclaration.lvskripts"
						},
						"5": {
							"name": "punctuation.decorator.internaldeclaration.lvskripts"
						}
					},
					"end": "(?=$)",
					"contentName": "comment.line.double-slash.lvskripts"
				}
			]
		},
		"single-line-comment-consuming-line-ending": {
			"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.lvskripts"
				},
				"2": {
					"name": "comment.line.double-slash.lvskripts"
				},
				"3": {
					"name": "punctuation.definition.comment.lvskripts"
				},
				"4": {
					"name": "storage.type.internaldeclaration.lvskripts"
				},
				"5": {
					"name": "punctuation.decorator.internaldeclaration.lvskripts"
				}
			},
			"end": "(?=^)",
			"contentName": "comment.line.double-slash.lvskripts"
		},
		"directives": {
			"name": "comment.line.triple-slash.directive.lvskripts",
			"begin": "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.lvskripts"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"name": "meta.tag.lvskripts",
					"begin": "(<)(reference|amd-dependency|amd-module)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.directive.lvskripts"
						},
						"2": {
							"name": "entity.name.tag.directive.lvskripts"
						}
					},
					"end": "/>",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.tag.directive.lvskripts"
						}
					},
					"patterns": [
						{
							"name": "entity.other.attribute-name.directive.lvskripts",
							"match": "path|types|no-default-lib|lib|name|resolution-mode"
						},
						{
							"name": "keyword.operator.assignment.lvskripts",
							"match": "="
						},
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"match": "(?x)\n((@)(?:access|api))\n\\s+\n(privāts|aizsargāts|publisks)\n\\b",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "constant.language.access-type.lvskriptsdoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.lvskriptsdoc"
						},
						"4": {
							"name": "punctuation.definition.bracket.angle.begin.lvskriptsdoc"
						},
						"5": {
							"name": "constant.other.email.link.underline.lvskriptsdoc"
						},
						"6": {
							"name": "punctuation.definition.bracket.angle.end.lvskriptsdoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (kā) \\s+              # kā\n((?:[^@\\s*/]|\\*[^/])+)    # <šis namepath>",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.lvskriptsdoc"
						},
						"4": {
							"name": "keyword.operator.control.lvskriptsdoc"
						},
						"5": {
							"name": "entity.name.type.instance.lvskriptsdoc"
						}
					}
				},
				{
					"name": "meta.example.lvskriptsdoc",
					"begin": "((@)example)\\s+",
					"end": "(?=@|\\*/)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					},
					"patterns": [
						{
							"match": "^\\s\\*\\s+"
						},
						{
							"contentName": "constant.other.description.lvskriptsdoc",
							"begin": "\\G(<)caption(>)",
							"beginCaptures": {
								"0": {
									"name": "entity.name.tag.inline.lvskriptsdoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.lvskriptsdoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.lvskriptsdoc"
								}
							},
							"end": "(</)caption(>)|(?=\\*/)",
							"endCaptures": {
								"0": {
									"name": "entity.name.tag.inline.lvskriptsdoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.lvskriptsdoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.lvskriptsdoc"
								}
							}
						},
						{
							"match": "[^\\s@*](?:[^*]|\\*[^/])*",
							"captures": {
								"0": {
									"name": "source.embedded.lvskripts"
								}
							}
						}
					]
				},
				{
					"match": "(?x) ((@)kind) \\s+ (klase|constant|event|external|file|funkcija|member|mixin|modulis|nosaukumtelpa|typedef) \\b",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "constant.language.symbol-type.lvskriptsdoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable kā links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "variable.other.link.underline.lvskriptsdoc"
						},
						"4": {
							"name": "entity.name.type.instance.lvskriptsdoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest no identifier\n  (?:                # Possible list no additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "variable.other.lvskriptsdoc"
						}
					}
				},
				{
					"begin": "(?x)((@)template)\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						},
						{
							"name": "variable.other.lvskriptsdoc",
							"match": "([A-Za-z_$][\\w$.\\[\\]]*)"
						}
					]
				},
				{
					"match": "(?x)\n(\n  (@)\n  (?:arg|argument|konstante|constant|member|nosaukumtelpa|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "variable.other.lvskriptsdoc"
						}
					}
				},
				{
					"begin": "((@)typedef)\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						},
						{
							"name": "entity.name.type.instance.lvskriptsdoc",
							"match": "(?:[^@\\s*/]|\\*[^/])+"
						}
					]
				},
				{
					"begin": "((@)(?:arg|argument|konstante|constant|member|nosaukumtelpa|param|prop|property|var))\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						},
						{
							"name": "variable.other.lvskriptsdoc",
							"match": "([A-Za-z_$][\\w$.\\[\\]]*)"
						},
						{
							"name": "variable.other.lvskriptsdoc",
							"match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything citādi\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
							"captures": {
								"1": {
									"name": "punctuation.definition.optional-value.begin.bracket.square.lvskriptsdoc"
								},
								"2": {
									"name": "keyword.operator.assignment.lvskriptsdoc"
								},
								"3": {
									"name": "source.embedded.lvskripts"
								},
								"4": {
									"name": "punctuation.definition.optional-value.end.bracket.square.lvskriptsdoc"
								},
								"5": {
									"name": "invalid.illegal.syntax.lvskriptsdoc"
								}
							}
						}
					]
				},
				{
					"begin": "(?x)\n(\n  (@)\n  (?:define|uzskaitījums|exception|eksportēt|paplašina|lends|implementē|modifies\n  |nosaukumtelpa|privāts|aizsargāts|returns?|apmierina|suppress|šis|throws|tips\n  |yields?)\n)\n\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						}
					]
				},
				{
					"match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |paplašina|external|funkcija|func|host|lends|listens|saskarne|memberof!?\n  |method|modulis|mixes|mixin|name|requires|see|šis|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.lvskriptsdoc"
						}
					}
				},
				{
					"contentName": "variable.other.lvskriptsdoc",
					"begin": "((@)(?:noklusējums(?:value)?|license|version))\\s+(([''\"]))",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "variable.other.lvskriptsdoc"
						},
						"4": {
							"name": "punctuation.definition.string.begin.lvskriptsdoc"
						}
					},
					"end": "(\\3)|(?=$|\\*/)",
					"endCaptures": {
						"0": {
							"name": "variable.other.lvskriptsdoc"
						},
						"1": {
							"name": "punctuation.definition.string.end.lvskriptsdoc"
						}
					}
				},
				{
					"match": "((@)(?:noklusējums(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						},
						"3": {
							"name": "variable.other.lvskriptsdoc"
						}
					}
				},
				{
					"name": "storage.type.class.lvskriptsdoc",
					"match": "(?x) (@) (?:abstrakts|access|alias|api|arg|argument|asinhrons|attribute|augments|author|beta|borrows|bubbles |callback|chainable|klase|classdesc|code|config|konstante|constant|konstruktors|constructs|copyright |noklusējums|defaultvalue|define|deprecated|desc|description|dict|emits|uzskaitījums|event|example|exception |exports?|paplašina|extension(?:_?priekš)?|external|externs|file|fileoverview|final|fires|priekš|func |funkcija|generator|global|hideconstructor|host|ignore|implementē|implicitCast|inherit[Dd]oc |inner|instance|saskarne|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|modulis|name|nosaukumtelpa|noalias|nocollapse|nocompile|nosideeffects |pārrakstīt|overview|paka|param|polymer(?:Behavior)?|preserve|privāts|prop|property|aizsargāts |publisks|read[Oo]nly|record|pieprasīt[ds]|returns?|see|since|statisks|struct|submodule|summary |suppress|template|šis|throws|todo|tutorial|tips|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
					"captures": {
						"1": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					}
				},
				{
					"include": "#inline-tags"
				},
				{
					"match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
					"captures": {
						"1": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.lvskriptsdoc"
						}
					}
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"end": "}|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				},
				{
					"begin": "\\[",
					"end": "\\]|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				}
			]
		},
		"inline-tags": {
			"patterns": [
				{
					"name": "constant.other.description.lvskriptsdoc",
					"match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.square.begin.lvskriptsdoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.square.end.lvskriptsdoc"
						}
					}
				},
				{
					"name": "entity.name.type.instance.lvskriptsdoc",
					"begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.bracket.curly.begin.lvskriptsdoc"
						},
						"2": {
							"name": "storage.type.class.lvskriptsdoc"
						},
						"3": {
							"name": "punctuation.definition.inline.tag.lvskriptsdoc"
						}
					},
					"end": "}|(?=\\*/)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.lvskriptsdoc"
						}
					},
					"patterns": [
						{
							"match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
							"captures": {
								"1": {
									"name": "variable.other.link.underline.lvskriptsdoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.lvskriptsdoc"
								}
							}
						},
						{
							"match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
							"captures": {
								"1": {
									"name": "variable.other.description.lvskriptsdoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.lvskriptsdoc"
								}
							}
						}
					]
				}
			]
		}
	}
}